!    -*- f90 -*-
! Note: the context of this file is case sensitive.

python module libgeograd ! in 
    interface  ! in :geograd
        module triangles_d ! in :geograd:tapenade/triangles_d.f90
            subroutine point_tri_d(a,ab0,b,bb,c,cb,p,pb,d,db) ! in :geograd:tapenade/triangles_d.f90:triangles_d
                real(kind=8) dimension(3),intent(in) :: a
                real(kind=8) dimension(3), intent(out) :: ab0
                real(kind=8) dimension(3),intent(in) :: b
                real(kind=8) dimension(3), intent(out) :: bb
                real(kind=8) dimension(3),intent(in) :: c
                real(kind=8) dimension(3), intent(out) :: cb
                real(kind=8) dimension(3),intent(in) :: p
                real(kind=8) dimension(3), intent(out) :: pb
                real(kind=8),intent(out) :: d
                real(kind=8),intent(in) :: db
            end subroutine point_tri_d
            subroutine line_line_d(p1,p1b,q1,q1b,p2,p2b,q2,q2b,d,db) ! in :geograd:tapenade/triangles_d.f90:triangles_d
                real(kind=8) dimension(3),intent(in) :: p1
                real(kind=8) dimension(3),intent(out) :: p1b
                real(kind=8) dimension(3),intent(in) :: q1
                real(kind=8) dimension(3),intent(out) :: q1b
                real(kind=8) dimension(3),intent(in) :: p2
                real(kind=8) dimension(3),intent(out) :: p2b
                real(kind=8) dimension(3),intent(in) :: q2
                real(kind=8) dimension(3),intent(out) :: q2b
                real(kind=8) intent(out):: d
                real(kind=8) intent(in):: db
            end subroutine line_line_d
            subroutine intersect_d(a1,a1b,b1,b1b,c1,c1b,a2,a2b,b2,b2b,c2,c2b,length,lengthb) ! in :geograd:tapenade/triangles_d.f90:triangles_d
                real(kind=8) dimension(3),intent(in) :: a1
                real(kind=8) dimension(3), intent(out) :: a1b
                real(kind=8) dimension(3),intent(in) :: b1
                real(kind=8) dimension(3), intent(out) :: b1b
                real(kind=8) dimension(3),intent(in) :: c1
                real(kind=8) dimension(3), intent(out) :: c1b
                real(kind=8) dimension(3),intent(in) :: a2
                real(kind=8) dimension(3), intent(out) :: a2b
                real(kind=8) dimension(3),intent(in) :: b2
                real(kind=8) dimension(3), intent(out) :: b2b
                real(kind=8) dimension(3),intent(in) :: c2
                real(kind=8) dimension(3), intent(out) :: c2b
                real(kind=8), intent(out) :: length
                real(kind=8),intent(in) :: lengthb
            end subroutine intersect_d
        end module triangles_d
        module triangles_b ! in :geograd:tapenade/triangles_b.f90
            subroutine point_tri_b(a,ab0,b,bb,c,cb,p,pb,d,db) ! in :geograd:tapenade/triangles_b.f90:triangles_b
                real(kind=8) dimension(3),intent(in) :: a
                real(kind=8) dimension(3), intent(out) :: ab0
                real(kind=8) dimension(3),intent(in) :: b
                real(kind=8) dimension(3), intent(out) :: bb
                real(kind=8) dimension(3),intent(in) :: c
                real(kind=8) dimension(3), intent(out) :: cb
                real(kind=8) dimension(3),intent(in) :: p
                real(kind=8) dimension(3), intent(out) :: pb
                real(kind=8),intent(out) :: d
                real(kind=8),intent(in) :: db
            end subroutine point_tri_b
            subroutine line_line_b(p1,p1b,q1,q1b,p2,p2b,q2,q2b,d,db) ! in :geograd:tapenade/triangles_b.f90:triangles_b
                real(kind=8) dimension(3),intent(in) :: p1
                real(kind=8) dimension(3),intent(out) :: p1b
                real(kind=8) dimension(3),intent(in) :: q1
                real(kind=8) dimension(3),intent(out) :: q1b
                real(kind=8) dimension(3),intent(in) :: p2
                real(kind=8) dimension(3),intent(out) :: p2b
                real(kind=8) dimension(3),intent(in) :: q2
                real(kind=8) dimension(3),intent(out) :: q2b
                real(kind=8) intent(out):: d
                real(kind=8) intent(in):: db
            end subroutine line_line_b
            subroutine intersect_b(a1,a1b,b1,b1b,c1,c1b,a2,a2b,b2,b2b,c2,c2b,length,lengthb) ! in :geograd:tapenade/triangles_b.f90:triangles_b
                real(kind=8) dimension(3),intent(in) :: a1
                real(kind=8) dimension(3), intent(out) :: a1b
                real(kind=8) dimension(3),intent(in) :: b1
                real(kind=8) dimension(3), intent(out) :: b1b
                real(kind=8) dimension(3),intent(in) :: c1
                real(kind=8) dimension(3), intent(out) :: c1b
                real(kind=8) dimension(3),intent(in) :: a2
                real(kind=8) dimension(3), intent(out) :: a2b
                real(kind=8) dimension(3),intent(in) :: b2
                real(kind=8) dimension(3), intent(out) :: b2b
                real(kind=8) dimension(3),intent(in) :: c2
                real(kind=8) dimension(3), intent(out) :: c2b
                real(kind=8), intent(out) :: length
                real(kind=8),intent(in) :: lengthb
            end subroutine intersect_b
        end module triangles_b
        module triangles ! in :geograd:src/triangles.F90
            subroutine point_tri(a,b,c,p,d) ! in :geograd:src/triangles.F90:triangles
                real(kind=8) dimension(3),intent(in) :: a
                real(kind=8) dimension(3),intent(in) :: b
                real(kind=8) dimension(3),intent(in) :: c
                real(kind=8) dimension(3),intent(in) :: p
                real(kind=8) intent(out) :: d
            end subroutine point_tri
            subroutine line_line(p1,q1,p2,q2,d) ! in :geograd:src/triangles.F90:triangles
                real(kind=8) dimension(3),intent(in) :: p1
                real(kind=8) dimension(3),intent(in) :: q1
                real(kind=8) dimension(3),intent(in) :: p2
                real(kind=8) dimension(3),intent(in) :: q2
                real(kind=8) intent(out) :: d
            end subroutine line_line
            subroutine intersect(a1,b1,c1,a2,b2,c2,length) ! in :geograd:src/triangles.F90:triangles
                real(kind=8) dimension(3),intent(in) :: a1
                real(kind=8) dimension(3),intent(in) :: b1
                real(kind=8) dimension(3),intent(in) :: c1
                real(kind=8) dimension(3),intent(in) :: a2
                real(kind=8) dimension(3),intent(in) :: b2
                real(kind=8) dimension(3),intent(in) :: c2
                real(kind=8) intent(out) :: length
            end subroutine intersect
        end module triangles
        module geograd ! in :geograd:src/geograd.F90
            subroutine compute_derivs(ks,intersect_length,mindist,dksda1,dksdb1,dksdc1,dksda2,dksdb2,dksdc2,dpda1,dpdb1,dpdc1,dpda2,dpdb2,dpdc2,a1,b1,c1,a2,b2,c2,n1,n2,mindist_in,rho) ! in :geograd:src/geograd.F90:geograd
                use triangles_b
                real(kind=8) intent(out) :: ks
                real(kind=8) intent(out) :: intersect_length
                real(kind=8) intent(out) :: mindist
                real(kind=8) dimension(3,n1),intent(out),depend(n1) :: dksda1
                real(kind=8) dimension(3,n1),intent(out),depend(n1) :: dksdb1
                real(kind=8) dimension(3,n1),intent(out),depend(n1) :: dksdc1
                real(kind=8) dimension(3,n2),intent(out),depend(n2) :: dksda2
                real(kind=8) dimension(3,n2),intent(out),depend(n2) :: dksdb2
                real(kind=8) dimension(3,n2),intent(out),depend(n2) :: dksdc2
                real(kind=8) dimension(3,n1),intent(out),depend(n1) :: dpda1
                real(kind=8) dimension(3,n1),intent(out),depend(n1) :: dpdb1
                real(kind=8) dimension(3,n1),intent(out),depend(n1) :: dpdc1
                real(kind=8) dimension(3,n2),intent(out),depend(n2) :: dpda2
                real(kind=8) dimension(3,n2),intent(out),depend(n2) :: dpdb2
                real(kind=8) dimension(3,n2),intent(out),depend(n2) :: dpdc2
                real(kind=8) dimension(3,n1),intent(in) :: a1
                real(kind=8) dimension(3,n1),intent(in),depend(n1) :: b1
                real(kind=8) dimension(3,n1),intent(in),depend(n1) :: c1
                real(kind=8) dimension(3,n2),intent(in) :: a2
                real(kind=8) dimension(3,n2),intent(in),depend(n2) :: b2
                real(kind=8) dimension(3,n2),intent(in),depend(n2) :: c2
                integer, optional,intent(in),check(shape(a1,1)==n1),depend(a1) :: n1=shape(a1,1)
                integer, optional,intent(in),check(shape(a2,1)==n2),depend(a2) :: n2=shape(a2,1)
                real(kind=8) intent(in) :: mindist_in
                real(kind=8) intent(in) :: rho
            end subroutine compute_derivs
            subroutine compute(ks,intersect_length,mindist,a1,b1,c1,a2,b2,c2,n1,n2,mindist_in,rho) ! in :geograd:src/geograd.F90:geograd
                use triangles
                real(kind=8) intent(out) :: ks
                real(kind=8) intent(out) :: intersect_length
                real(kind=8) intent(out) :: mindist
                real(kind=8) dimension(3,n1),intent(in) :: a1
                real(kind=8) dimension(3,n1),intent(in),depend(n1) :: b1
                real(kind=8) dimension(3,n1),intent(in),depend(n1) :: c1
                real(kind=8) dimension(3,n2),intent(in) :: a2
                real(kind=8) dimension(3,n2),intent(in),depend(n2) :: b2
                real(kind=8) dimension(3,n2),intent(in),depend(n2) :: c2
                integer, optional,intent(in),check(shape(a1,1)==n1),depend(a1) :: n1=shape(a1,1)
                integer, optional,intent(in),check(shape(a2,1)==n2),depend(a2) :: n2=shape(a2,1)
                real(kind=8) intent(in) :: mindist_in
                real(kind=8) intent(in) :: rho
            end subroutine compute
        end module geograd
        module geograd_parallel ! in :geograd:src/geograd_parallel.F90
            subroutine compute_derivs(ks,intersect_length,mindist,timings,unbalance,dksda1,dksdb1,dksdc1,dksda2,dksdb2,dksdc2,dpda1,dpdb1,dpdc1,dpda2,dpdb2,dpdc2,a1,b1,c1,a2,b2,c2,n1,n2,mindist_in,rho,obj_tol_in,geograd_comm_world) ! in :geograd:src/geograd_parallel.F90:geograd
                use triangles_b
                real(kind=8) intent(out) :: ks
                real(kind=8) intent(out) :: intersect_length
                real(kind=8) intent(out) :: mindist
                real(kind=8) intent(out) :: unbalance
                real(kind=8) intent(out), dimension(4) :: timings
                real(kind=8) dimension(3,n1),intent(out),depend(n1) :: dksda1
                real(kind=8) dimension(3,n1),intent(out),depend(n1) :: dksdb1
                real(kind=8) dimension(3,n1),intent(out),depend(n1) :: dksdc1
                real(kind=8) dimension(3,n2),intent(out),depend(n2) :: dksda2
                real(kind=8) dimension(3,n2),intent(out),depend(n2) :: dksdb2
                real(kind=8) dimension(3,n2),intent(out),depend(n2) :: dksdc2
                real(kind=8) dimension(3,n1),intent(out),depend(n1) :: dpda1
                real(kind=8) dimension(3,n1),intent(out),depend(n1) :: dpdb1
                real(kind=8) dimension(3,n1),intent(out),depend(n1) :: dpdc1
                real(kind=8) dimension(3,n2),intent(out),depend(n2) :: dpda2
                real(kind=8) dimension(3,n2),intent(out),depend(n2) :: dpdb2
                real(kind=8) dimension(3,n2),intent(out),depend(n2) :: dpdc2
                real(kind=8) dimension(3,n1),intent(in) :: a1
                real(kind=8) dimension(3,n1),intent(in),depend(n1) :: b1
                real(kind=8) dimension(3,n1),intent(in),depend(n1) :: c1
                real(kind=8) dimension(3,n2),intent(in) :: a2
                real(kind=8) dimension(3,n2),intent(in),depend(n2) :: b2
                real(kind=8) dimension(3,n2),intent(in),depend(n2) :: c2
                integer, optional,intent(in),check(shape(a1,1)==n1),depend(a1) :: n1=shape(a1,1)
                integer, optional,intent(in),check(shape(a2,1)==n2),depend(a2) :: n2=shape(a2,1)
                real(kind=8) intent(in) :: mindist_in
                real(kind=8) intent(in) :: rho
                real(kind=8) intent(in) :: obj_tol_in
                integer intent(in) :: geograd_comm_world
            end subroutine compute_derivs
            subroutine compute(ks,intersect_length,mindist,timings,unbalance,a1,b1,c1,a2,b2,c2,n1,n2,mindist_in,rho,obj_tol_in,geograd_comm_world) ! in :geograd:src/geograd_parallel.F90:geograd
                use triangles
                real(kind=8) intent(out) :: ks
                real(kind=8) intent(out) :: intersect_length
                real(kind=8) intent(out) :: mindist
                real(kind=8) intent(out) :: unbalance
                real(kind=8) intent(out), dimension(4) :: timings
                real(kind=8) dimension(3,n1),intent(in) :: a1
                real(kind=8) dimension(3,n1),intent(in),depend(n1) :: b1
                real(kind=8) dimension(3,n1),intent(in),depend(n1) :: c1
                real(kind=8) dimension(3,n2),intent(in) :: a2
                real(kind=8) dimension(3,n2),intent(in),depend(n2) :: b2
                real(kind=8) dimension(3,n2),intent(in),depend(n2) :: c2
                integer, optional,intent(in),check(shape(a1,1)==n1),depend(a1) :: n1=shape(a1,1)
                integer, optional,intent(in),check(shape(a2,1)==n2),depend(a2) :: n2=shape(a2,1)
                real(kind=8) intent(in) :: mindist_in
                real(kind=8) intent(in) :: rho
                real(kind=8) intent(in) :: obj_tol_in
                integer intent(in) :: geograd_comm_world
            end subroutine compute
        end module geograd_parallel
    end interface 
end python module geograd

! This file was auto-generated with f2py (version:2).
! See http://cens.ioc.ee/projects/f2py2e/
